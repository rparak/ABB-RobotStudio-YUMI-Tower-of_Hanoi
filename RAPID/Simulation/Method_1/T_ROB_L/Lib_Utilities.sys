MODULE Lib_Utilities(SYSMODULE)
    PROC GET_TOH_SOLUTION_Standard(num num_of_rings, INOUT byte OUTPUT{*, *})
        ! Description:                                                              !
        !   Get the (standard) solution of the mathematical problem Tower of Hanoi. !
        ! Note:                                                                     !
        !   The solution is generated from a Python script inside                   !
        !   the repository.                                                         !
        
        TEST num_of_rings
            CASE 1:
                OUTPUT := [[0, 0, 2, 1, 0, 0]];
            CASE 2:
                OUTPUT := [[1, 0, 1, 2, 0, 0],
                           [0, 0, 2, 1, 1, 0],
                           [1, 1, 2, 0, 1, 1]];
            CASE 3:
                OUTPUT := [[2, 0, 2, 3, 0, 0],
                           [1, 0, 1, 2, 0, 1],
                           [2, 2, 1, 1, 1, 1],
                           [0, 0, 2, 1, 2, 0],
                           [2, 1, 0, 0, 2, 1],
                           [1, 1, 2, 1, 1, 1],
                           [2, 0, 2, 1, 0, 2]];
            CASE 4:
                OUTPUT := [[3, 0, 1, 4, 0, 0],
                           [2, 0, 2, 3, 1, 0],
                           [3, 1, 2, 2, 1, 1],
                           [1, 0, 1, 2, 0, 2],
                           [3, 2, 0, 1, 1, 2],
                           [2, 2, 1, 2, 1, 1],
                           [3, 0, 1, 2, 2, 0],
                           [0, 0, 2, 1, 3, 0],
                           [3, 1, 2, 0, 3, 1],
                           [2, 1, 0, 0, 2, 2],
                           [3, 2, 0, 1, 1, 2],
                           [1, 1, 2, 2, 1, 1],
                           [3, 0, 1, 2, 0, 2],
                           [2, 0, 2, 1, 1, 2],
                           [3, 1, 2, 0, 1, 3]];
            CASE 5:
                OUTPUT := [[4, 0, 2, 5, 0, 0],
                           [3, 0, 1, 4, 0, 1],
                           [4, 2, 1, 3, 1, 1],
                           [2, 0, 2, 3, 2, 0],
                           [4, 1, 0, 2, 2, 1],
                           [3, 1, 2, 3, 1, 1],
                           [4, 0, 2, 3, 0, 2],
                           [1, 0, 1, 2, 0, 3],
                           [4, 2, 1, 1, 1, 3],
                           [3, 2, 0, 1, 2, 2],
                           [4, 1, 0, 2, 2, 1],
                           [2, 2, 1, 3, 1, 1],
                           [4, 0, 2, 3, 2, 0],
                           [3, 0, 1, 2, 2, 1],
                           [4, 2, 1, 1, 3, 1],
                           [0, 0, 2, 1, 4, 0],
                           [4, 1, 0, 0, 4, 1],
                           [3, 1, 2, 1, 3, 1],
                           [4, 0, 2, 1, 2, 2],
                           [2, 1, 0, 0, 2, 3],
                           [4, 2, 1, 1, 1, 3],
                           [3, 2, 0, 1, 2, 2],
                           [4, 1, 0, 2, 2, 1],
                           [1, 1, 2, 3, 1, 1],
                           [4, 0, 2, 3, 0, 2],
                           [3, 0, 1, 2, 0, 3],
                           [4, 2, 1, 1, 1, 3],
                           [2, 0, 2, 1, 2, 2],
                           [4, 1, 0, 0, 2, 3],
                           [3, 1, 2, 1, 1, 3],
                           [4, 0, 2, 1, 0, 4]];
            CASE 6:
                OUTPUT := [[5, 0, 1, 6, 0, 0],
                           [4, 0, 2, 5, 1, 0],
                           [5, 1, 2, 4, 1, 1],
                           [3, 0, 1, 4, 0, 2],
                           [5, 2, 0, 3, 1, 2],
                           [4, 2, 1, 4, 1, 1],
                           [5, 0, 1, 4, 2, 0],
                           [2, 0, 2, 3, 3, 0],
                           [5, 1, 2, 2, 3, 1],
                           [4, 1, 0, 2, 2, 2],
                           [5, 2, 0, 3, 1, 2],
                           [3, 1, 2, 4, 1, 1],
                           [5, 0, 1, 4, 0, 2],
                           [4, 0, 2, 3, 1, 2],
                           [5, 1, 2, 2, 1, 3],
                           [1, 0, 1, 2, 0, 4],
                           [5, 2, 0, 1, 1, 4],
                           [4, 2, 1, 2, 1, 3],
                           [5, 0, 1, 2, 2, 2],
                           [3, 2, 0, 1, 3, 2],
                           [5, 1, 2, 2, 3, 1],
                           [4, 1, 0, 2, 2, 2],
                           [5, 2, 0, 3, 1, 2],
                           [2, 2, 1, 4, 1, 1],
                           [5, 0, 1, 4, 2, 0],
                           [4, 0, 2, 3, 3, 0],
                           [5, 1, 2, 2, 3, 1],
                           [3, 0, 1, 2, 2, 2],
                           [5, 2, 0, 1, 3, 2],
                           [4, 2, 1, 2, 3, 1],
                           [5, 0, 1, 2, 4, 0],
                           [0, 0, 2, 1, 5, 0],
                           [5, 1, 2, 0, 5, 1],
                           [4, 1, 0, 0, 4, 2],
                           [5, 2, 0, 1, 3, 2],
                           [3, 1, 2, 2, 3, 1],
                           [5, 0, 1, 2, 2, 2],
                           [4, 0, 2, 1, 3, 2],
                           [5, 1, 2, 0, 3, 3],
                           [2, 1, 0, 0, 2, 4],
                           [5, 2, 0, 1, 1, 4],
                           [4, 2, 1, 2, 1, 3],
                           [5, 0, 1, 2, 2, 2],
                           [3, 2, 0, 1, 3, 2],
                           [5, 1, 2, 2, 3, 1],
                           [4, 1, 0, 2, 2, 2],
                           [5, 2, 0, 3, 1, 2],
                           [1, 1, 2, 4, 1, 1],
                           [5, 0, 1, 4, 0, 2],
                           [4, 0, 2, 3, 1, 2],
                           [5, 1, 2, 2, 1, 3],
                           [3, 0, 1, 2, 0, 4],
                           [5, 2, 0, 1, 1, 4],
                           [4, 2, 1, 2, 1, 3],
                           [5, 0, 1, 2, 2, 2],
                           [2, 0, 2, 1, 3, 2],
                           [5, 1, 2, 0, 3, 3],
                           [4, 1, 0, 0, 2, 4], 
                           [5, 2, 0, 1, 1, 4],
                           [3, 1, 2, 2, 1, 3],
                           [5, 0, 1, 2, 0, 4],
                           [4, 0, 2, 1, 1, 4],
                           [5, 1, 2, 0, 1, 5]];
        ENDTEST
    ENDPROC
    
    PROC GET_TOH_SOLUTION_Inverse(num num_of_rings, INOUT byte OUTPUT{*, *})
        ! Description:                                                             !
        !   Get the (inverse) solution of the mathematical problem Tower of Hanoi. !
        ! Note:                                                                    !
        !   The solution is generated from a Python script inside                  !
        !   the repository.                                                        !
        
        TEST num_of_rings
            CASE 1:
                OUTPUT := [[0, 2, 0, 0, 0, 1]];
            CASE 2:
                OUTPUT := [[1, 2, 1, 0, 0, 2], 
                           [0, 2, 0, 0, 1, 1], 
                           [1, 1, 0, 1, 1, 0]];
            CASE 3:
                OUTPUT := [[2, 2, 0, 0, 0, 3], 
                           [1, 2, 1, 1, 0, 2], 
                           [2, 0, 1, 1, 1, 1], 
                           [0, 2, 0, 0, 2, 1], 
                           [2, 1, 2, 1, 2, 0], 
                           [1, 1, 0, 1, 1, 1], 
                           [2, 2, 0, 2, 0, 1]];
            CASE 4:
                OUTPUT := [[3, 2, 1, 0, 0, 4], 
                           [2, 2, 0, 0, 1, 3], 
                           [3, 1, 0, 1, 1, 2], 
                           [1, 2, 1, 2, 0, 2], 
                           [3, 0, 2, 2, 1, 1],
                           [2, 0, 1, 1, 1, 2], 
                           [3, 2, 1, 0, 2, 2], 
                           [0, 2, 0, 0, 3, 1], 
                           [3, 1, 0, 1, 3, 0],
                           [2, 1, 2, 2, 2, 0],
                           [3, 0, 2, 2, 1, 1],
                           [1, 1, 0, 1, 1, 2],
                           [3, 2, 1, 2, 0, 2],
                           [2, 2, 0, 2, 1, 1],
                           [3, 1, 0, 3, 1, 0]];
            CASE 5:
                OUTPUT := [[4, 2, 0, 0, 0, 5],
                           [3, 2, 1, 1, 0, 4],
                           [4, 0, 1, 1, 1, 3],
                           [2, 2, 0, 0, 2, 3],
                           [4, 1, 2, 1, 2, 2],
                           [3, 1, 0, 1, 1, 3],
                           [4, 2, 0, 2, 0, 3],
                           [1, 2, 1, 3, 0, 2],
                           [4, 0, 1, 3, 1, 1],
                           [3, 0, 2, 2, 2, 1],
                           [4, 1, 2, 1, 2, 2],
                           [2, 0, 1, 1, 1, 3],
                           [4, 2, 0, 0, 2, 3],
                           [3, 2, 1, 1, 2, 2],
                           [4, 0, 1, 1, 3, 1],
                           [0, 2, 0, 0, 4, 1],
                           [4, 1, 2, 1, 4, 0],
                           [3, 1, 0, 1, 3, 1],
                           [4, 2, 0, 2, 2, 1],
                           [2, 1, 2, 3, 2, 0],
                           [4, 0, 1, 3, 1, 1],
                           [3, 0, 2, 2, 2, 1],
                           [4, 1, 2, 1, 2, 2],
                           [1, 1, 0, 1, 1, 3],
                           [4, 2, 0, 2, 0, 3],
                           [3, 2, 1, 3, 0, 2],
                           [4, 0, 1, 3, 1, 1],
                           [2, 2, 0, 2, 2, 1],
                           [4, 1, 2, 3, 2, 0],
                           [3, 1, 0, 3, 1, 1],
                           [4, 2, 0, 4, 0, 1]];
            CASE 6:
                OUTPUT := [[5, 2, 1, 0, 0, 6],
                           [4, 2, 0, 0, 1, 5],
                           [5, 1, 0, 1, 1, 4],
                           [3, 2, 1, 2, 0, 4],
                           [5, 0, 2, 2, 1, 3],
                           [4, 0, 1, 1, 1, 4],
                           [5, 2, 1, 0, 2, 4],
                           [2, 2, 0, 0, 3, 3],
                           [5, 1, 0, 1, 3, 2],
                           [4, 1, 2, 2, 2, 2], 
                           [5, 0, 2, 2, 1, 3], 
                           [3, 1, 0, 1, 1, 4],
                           [5, 2, 1, 2, 0, 4],
                           [4, 2, 0, 2, 1, 3],
                           [5, 1, 0, 3, 1, 2],
                           [1, 2, 1, 4, 0, 2],
                           [5, 0, 2, 4, 1, 1],
                           [4, 0, 1, 3, 1, 2],
                           [5, 2, 1, 2, 2, 2],
                           [3, 0, 2, 2, 3, 1],
                           [5, 1, 0, 1, 3, 2],
                           [4, 1, 2, 2, 2, 2],
                           [5, 0, 2, 2, 1, 3],
                           [2, 0, 1, 1, 1, 4],
                           [5, 2, 1, 0, 2, 4],
                           [4, 2, 0, 0, 3, 3],
                           [5, 1, 0, 1, 3, 2],
                           [3, 2, 1, 2, 2, 2],
                           [5, 0, 2, 2, 3, 1],
                           [4, 0, 1, 1, 3, 2],
                           [5, 2, 1, 0, 4, 2],
                           [0, 2, 0, 0, 5, 1],
                           [5, 1, 0, 1, 5, 0],
                           [4, 1, 2, 2, 4, 0],
                           [5, 0, 2, 2, 3, 1],
                           [3, 1, 0, 1, 3, 2],
                           [5, 2, 1, 2, 2, 2],
                           [4, 2, 0, 2, 3, 1],
                           [5, 1, 0, 3, 3, 0],
                           [2, 1, 2, 4, 2, 0],
                           [5, 0, 2, 4, 1, 1],
                           [4, 0, 1, 3, 1, 2],
                           [5, 2, 1, 2, 2, 2],
                           [3, 0, 2, 2, 3, 1],
                           [5, 1, 0, 1, 3, 2],
                           [4, 1, 2, 2, 2, 2],
                           [5, 0, 2, 2, 1, 3],
                           [1, 1, 0, 1, 1, 4],
                           [5, 2, 1, 2, 0, 4],
                           [4, 2, 0, 2, 1, 3],
                           [5, 1, 0, 3, 1, 2],
                           [3, 2, 1, 4, 0, 2],
                           [5, 0, 2, 4, 1, 1],
                           [4, 0, 1, 3, 1, 2],
                           [5, 2, 1, 2, 2, 2],
                           [2, 2, 0, 2, 3, 1],
                           [5, 1, 0, 3, 3, 0],
                           [4, 1, 2, 4, 2, 0],
                           [5, 0, 2, 4, 1, 1],
                           [3, 1, 0, 3, 1, 2],
                           [5, 2, 1, 4, 0, 2],
                           [4, 2, 0, 4, 1, 1],
                           [5, 1, 0, 5, 1, 0]];
        ENDTEST
    ENDPROC
ENDMODULE